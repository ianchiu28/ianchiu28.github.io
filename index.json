
[{"content":"","date":"2025 June 17","externalUrl":null,"permalink":"/","section":"Ian's blog","summary":"","title":"Ian's blog","type":"page"},{"content":"","date":"2025 June 17","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"\r前言 #\r之前我就有用 Hexo 來搭建個人 blog，但說來慚愧，只寫了兩篇就懶了，真是不愧對我極度懶惰的稱號 ಠ⁠◡⁠ಠ\n這次重拾寫文章便重新搜尋了一下，這次打算改用 Hugo 來搭建個人 blog。了解到 Hugo build 靜態文章的的速度真的飛快，加上也看到不錯的 theme，看能不能讓我多撐個幾篇文章 (⁠◍⁠•⁠ᴗ⁠•⁠◍⁠)⁠\n安裝 Hugo #\r首先先來安裝 Hugo 吧！\n我是選 windows 的 extended 版本 (版本差異可以查看 GitHub 說明)，可以直接下載 prebuilt binary 比較簡單 下載後解壓縮，然後把檔案都放到 c:\\hugo\\bin 底下 修改一下環境變數 另外，我自己平常都用 git bash 作為主要 terminal，所以還要改 .bashrc\n# ~/.bashrc export PATH=\u0026#34;$PATH:/c/hugo/bin\u0026#34; 最後用 hugo version 確認安裝是否完成\nhugo version # hugo v0.147.8-10da2bd765d227761641f94d713d094e88b920ae+extended windows/amd64 BuildDate=2025-06-07T12:59:52Z VendorInfo=gohugoio 安裝其實滿簡單的 (⁠｡⁠•̀⁠ᴗ⁠-⁠)⁠✧\n建立文章後台 #\r這裡先說明一下靜態網頁 blog 的運作模式：\n我們會搭建出一個 Hugo 專案（我這邊稱為文章後台），在裡面去寫很多篇 Markdown 格式的文章，然後再透過 Hugo 指令去轉換(build) 成靜態網頁的形式。最後只要部署靜態網頁到網路上就好囉，Hugo 專案內的其他東西就像是你的後台，都是產出文章的原始資料、設定檔或工具，不需要部署到網路上\n我們現在先來做 Hugo 專案的搭建\nhugo new site mywebsite 安裝 theme，我選擇 blowfish\ngit init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 設定 theme 的 configurations\n先刪掉原本 hugo 產生的 hugo.toml，然後把 blowfish theme 裡面的 config/* 整個複製到 root/* 要注意如果原本就有 module.toml 的話，要小心不要覆蓋掉 (雖然我沒這問題)\n然後打開 config/_default/hugo.toml 把這兩行改一下，baseURL 是要填到時候個人網站的網址哦！\ntheme = \u0026#34;blowfish\u0026#34; # UNCOMMENT THIS LINE baseURL = \u0026#34;https://ianchiu28.github.io\u0026#34; 到這邊可以先在 local 端試一下，理論上會看到成功畫面，有看到的話代表到目前為止都成功哦 d(`･∀･)b\nhugo server 寫一篇文章試試看 #\r輸入指令，會自動升成一篇文章在 content/posts/ 底下\nhugo new content content/posts/my-test-post.md 要注意改 draft = false，這樣用 Hugo 才會知道你這篇文章已經可以發布囉\n改一下 layout，這樣才可以顯示文章\n把 menu 打開\n# config/_default/menus.en.toml [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 調整 homepage 顯示內容\n# config/_default/params.toml [homepage] layout = \u0026#34;profile\u0026#34; # valid options: page, profile, hero, card, background, custom #homepageImage = \u0026#34;IMAGE.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 5 showMoreLink = true showMoreLinkDest = \u0026#34;/posts/\u0026#34; cardView = true cardViewScreenWidth = false layoutBackgroundBlur = false # only used when layout equals background 這樣就可以順利顯示囉 (◔⊖◔)つ 後面就再自己依喜好去調整自己喜歡的 configurations，可以看著 Hugo 的文件去調整，推薦先看這兩篇：\nhttps://blowfish.page/docs/getting-started/ https://blowfish.page/docs/configuration/ 把寫好的文章發布到個人網站 #\r我是採用 GitHub Page 作為我個人網站的 Host。因為不用錢，滿推薦的哦 (✪ω✪)\n先把文章 build 成靜態網頁\nhugo 把 public/* 都複製到 GitHub Page 的 repo 內，然後 commit 上去，就部屬完成囉～\n題外話：integrity 問題 #\r我部屬到 GitHub Page 後，有遇到 integrity 問題。找了一下，可能是 build 的時候有壓縮或是什麼導致的。目前沒有看到很好的解法，也找不到 Hugo/Blowfish 有關閉 integrity config 的方法\n現況是找到 /theme/blowfish/layouts/partials/head.html，找到有 integrity 的地方都把他砍掉。以及 /theme/blowfish/layouts/partials/vendor.html，把 jQuery 的 integrity 砍掉。然後重新用 hugo build 靜態網頁即可～ 如果有更好的做法請再跟我說 இдஇ\n最後加碼：我覺得每次都要複製 public/* 好麻煩 #\r寫了一個 script\n#!/bin/bash # 設定目標資料夾 TARGET_DIR=\u0026#34;../ianchiu28.github.io\u0026#34; # 確認目標資料夾存在 if [ ! -d \u0026#34;$TARGET_DIR\u0026#34; ]; then echo \u0026#34;錯誤：目標資料夾 $TARGET_DIR 不存在\u0026#34; exit 1 fi # 先建立 public 資料夾 hugo # 清空目標資料夾（保留 .git） find \u0026#34;$TARGET_DIR\u0026#34; -mindepth 1 -maxdepth 1 ! -name \u0026#39;.git\u0026#39; -exec rm -rf {} + # 複製所有檔案，包含隱藏檔案 cp -rf public/. \u0026#34;$TARGET_DIR/\u0026#34; echo \u0026#34;已將網站內容發布到 $TARGET_DIR\u0026#34; 執行方式\nsh publish.sh 然後用 git commit \u0026amp; push 就完成囉 (｡◕∀◕｡)\n不太重要的閒聊 #\r最近換了一份新工作，正處在努力適應的階段。回想起準備求職的這段期間，發覺自己其實沒留下什麼記錄在這世界上，我能講的好像只有工作經歷而已。看著眾多對手（？）都有著豐富的經歷，加上我也想讓自己的人生看起來豐富一點，準備重拾寫文章啦！這裡算是立一個 flag，希望極度懶惰的我能堅持下去 (⁠ʘ⁠ᗩ⁠ʘ⁠’⁠)\n","date":"2025 June 17","externalUrl":null,"permalink":"/posts/set-up-hugo-blog/","section":"Posts","summary":"","title":"用 Hugo 搭建個人網站","type":"posts"},{"content":"test\n","date":"2018 June 13","externalUrl":null,"permalink":"/posts/line-bot-2nd/","section":"Posts","summary":"","title":"架設一個 LineBot 聊天機器人 (下篇)","type":"posts"},{"content":"test\n","date":"2018 May 23","externalUrl":null,"permalink":"/posts/line-bot-1st/","section":"Posts","summary":"","title":"架設一個 LineBot 聊天機器人 (上篇)","type":"posts"},{"content":"\r架設一個 LineBot 聊天機器人 #\r此系列文共分上下兩篇:\n架設一個 LineBot 聊天機器人 (上篇) 架設一個 LineBot 聊天機器人 (下篇) 簡單介紹 #\r上篇 #\r此篇將會介紹如何使用 Line 的網頁去建立一個 LineBot 聊天機器人。不需撰寫任何程式或架設伺服器，只需要動動小手點擊網頁，把屬於你的 LineBot 設定好，就可以跟你做簡單的對話囉！\n下篇 #\r此篇將會介紹如何使用 Heroku 架設一台伺服器，作為 LineBot 的 webhook server。使用的語言是 Node.js，只需要在程式內撰寫你的邏輯，便可以讓你的 LineBot 更有智慧的和你聊天唷！\n不太重要的閒聊 #\r會寫這篇系列文主要是受到 IT邦的鐵人賽文章 - 卡米狗 的啟發，看完文章後就很想做一個機器人來跟朋友講垃圾話啊！加上自己剛開始學習 Node.js，變想說用 Node.js 來開發一個 LineBot 試試看好了，做個玩具來玩玩順便練個功。\n此文功能面上可能不會像卡米狗這麼齊全，算是個小玩具、學習紀錄這樣子，如果你有什麼想法或功能，歡迎一起討論，我們可以一起研究看看～\n","date":"2018 May 19","externalUrl":null,"permalink":"/posts/line-bot-intro/","section":"Posts","summary":"","title":"架設一個 LineBot 聊天機器人","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]