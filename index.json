
[{"content":"","date":"2025 July 2","externalUrl":null,"permalink":"/tags/browser/","section":"Tags","summary":"","title":"Browser","type":"tags"},{"content":"","date":"2025 July 2","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025 July 2","externalUrl":null,"permalink":"/tags/chat/","section":"Tags","summary":"","title":"Chat","type":"tags"},{"content":"","date":"2025 July 2","externalUrl":null,"permalink":"/","section":"Ian's blog","summary":"","title":"Ian's blog","type":"page"},{"content":"","date":"2025 July 2","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025 July 2","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025 July 2","externalUrl":null,"permalink":"/categories/tech/","section":"Categories","summary":"","title":"Tech","type":"categories"},{"content":"\r前言 #\r之前有一次同事問我在用什麼瀏覽器，那時才驚覺\n對耶！我好像只有單純的在用 Edge，沒用到什麼酷東西 (⁠ʘ⁠ᗩ⁠ʘ⁠’⁠)\n其實之前也有用過 Chrome 和 Arc，他們都還不錯用啦，但是 Chrome 真的很吃記憶體。\nArc 只有 Mac 版好用，Win 根本是閹割版，而且現在還被母公司判死刑了 (´-ι_-｀)\n借這個機會研究一下有沒有新的酷酷瀏覽器吧。\n先來想一下自己需要什麼 #\rMust to have\n有優秀的分頁管理功能，至少要有 類似 chrome 的分頁群組機制 要可以用常見的 extension Nice to have\n介面簡潔，常駐的東西能占用越少版面越好，我喜歡大畫面! 不能太吃記憶體，不要讓電腦起飛 可以增加生產力 其實仔細想想 Edge 就符合了大部分需求，也難怪我會一直沒有想要換 ಠ⁠◡⁠ಠ\n美中不足的大概是有一些我不需要的東西會出現在版面上吧？\n看了些網路資料再篩選一下後，自己最後只想試這三個： Vivaldi, Brave, Zen\nVivaldi #\rVivaldi 官網\n嘗試了一段時間後，發現他的分頁管理機制是採取疊起來的玩法，很佔畫面空間，還沒辦法替分頁群組命名。\n分頁也不適合都用工作區去管理，每次都要額外開也太累。嘗試了一下，還是放棄了。\nBrave #\rBrave 官網\nChrome 家族加上自動的擋廣告機制是賣點，有查到效能還不錯～\n但我一開始很抗拒的是他的加密貨幣玩法，我不是很喜歡瀏覽器還多了這種東西。\n嘗試了一下發現原來加密貨幣可以關掉不去看他，讚！ ヽ(●´∀`●)ﾉ\n然後分頁管理其實就是 Chrome 家族的用法。\nZen #\rZen 官網\n查了查資料了解是 Firefox 底，隱私方面應該不錯。\n介面也很像 Arc，但成熟度可能還不夠，加上 extension 通常都先支援 chrome 家族，就先沒嘗試了。\n最後的抉擇 #\r最後選擇了 Brave，有符合目前的需求，還不錯。\n雖然跟 Edge 比起來真的差別不大，大概只是多了自動擋廣告的功能而已。\n所以其實換或不換好像差別不大 (•ㅂ•)/\n期待未來更酷的產品出來吧，現在就先跟 Brave 玩一陣子～\n","date":"2025 July 2","externalUrl":null,"permalink":"/posts/move-to-brave-browser/","section":"Posts","summary":"","title":"跳巢到 Brave 瀏覽器","type":"posts"},{"content":"","date":"2025 June 29","externalUrl":null,"permalink":"/tags/book/","section":"Tags","summary":"","title":"Book","type":"tags"},{"content":"","date":"2025 June 29","externalUrl":null,"permalink":"/categories/life/","section":"Categories","summary":"","title":"Life","type":"categories"},{"content":"","date":"2025 June 29","externalUrl":null,"permalink":"/tags/psychology/","section":"Tags","summary":"","title":"Psychology","type":"tags"},{"content":"","date":"2025 June 29","externalUrl":null,"permalink":"/tags/talk/","section":"Tags","summary":"","title":"Talk","type":"tags"},{"content":"\r前言 #\r最近換了新的工作環境，理所當然的要開始一連串的社交，熟悉新同事、新環境的過程了。 同事們人都很好，但我真的是慢熟的人，常常覺得要很快的跟大家熟絡超爆難啊！ இдஇ\n剛好在誠品看到相關書籍，花了一個週末好好研讀一下。 老實說，我是把他當成 「工具書」 的形式在閱讀，學習到了很多新的觀點和技巧，因此做一下紀錄。 希望自己能順利使用上，在認識新環境能派上用場 ヾ(◎´・ω・｀)ノ\n閒聊和一般對話完全不同 #\r有個段落在這本書的開頭就立刻抓住我的眼球！ ฅ(๑*д*๑)ฅ!!\n閒聊和一般對話完全不同。對大部分人來說，對話大多只有下面兩種情況：\n① 跟朋友或熟人無拘無束、輕鬆地聊天。\n② 在工作場合，嚴肅正經地對話。\n這些就是所謂的「一般對話」。\n但閒聊算是第三種對話，不在這兩種類型之中。而大家閒聊時，都使用上述兩種類型的對話方式，所以大多是以失敗收場。 閒聊指的是「跟關係微妙的人，以適當的對話拉近關係」，是非常細膩的對話方式。\n當下看完真的深有感觸。① 跟 ② 的情境我都可以很順利的去聊，但是像跟同事午餐過程的閒聊，總會感到力不從心。 書中直接把「閒聊」拆出來定義成另一種對話，讓我覺得非常親切，可以用一個新的概念去看待「閒聊」。\n閒聊的目的只有一個，就是「建立人際關係」 #\r重點不在「內容」，而是你來我往的「持久性」。\n對話的你來我往，能持續不中斷就好。\n閒聊的內容，在於交流心情，而非交換資訊。\n太過於重視結論、要獲取東西，都會讓閒聊太有壓力，不容易持續，交流心情就會簡單許多。\n還記得之前也在網路上搜尋這類型的議題，那時候想了解怎麼做好每次的 Small Talk，也有看到一部影片說得很好。\nSmall Talk 的本質不在於內容，而是對話一直持續的過程，讓雙方都感受到我們想繼續加強這段關係。\n這是一個很酷的觀念衝擊 ∑(ι´Дン)ノ，也讓我有了很深的體悟。\n過去關注的地方可能都錯了，都把閒聊的目的放在了解對方、找尋共同話題，最後加深關係。 所以會出現很多問卷式的對答，或是腦袋拼命思考自己要創造什麼人設。\n但其實這可能都太躁進了，當下先讓對話能持續下去，或許才是加深關係的捷徑。 畢竟你都聊順了，怎麼可能關係不好，對吧？\n閒聊不要交換資訊，要交流心情 #\r我覺得這是貫穿整本書的一個核心想法，書中多次提到不要在意內容、甚至還說別人問 A 其實可以回 B。 書中多次強調讓對話延續才是重點，所以基於這點，我們更加著重「交流心情」而非「交換資訊」。\n接近直覺式的回應心情與感受，給予情緒價值。而不是花費心力去思考某個複雜的答案，或是挖掘埋藏在深處的某段記憶再給予回覆。 前者更容易讓關係更貼近，後者則會讓雙方對於對話感到更多的壓力。\n我覺得白話文來說，就是\u0026hellip;\n「給我放下我那個多餘的『理科臭直男思考』！！」 (／‵Д′)／~ ╧╧\n不用什麼都有意義。 閒聊就是在過程不用去追求意義，這樣才能更容易取得我們要的意義 (加強彼此關係)\n書中的一些酷東西和小 tips #\r蒐集一些可能對我有用的酷東西和小 tips，讓我遇到要閒聊的場景時，可以隨時過來複習一下 ( ～'ω')～\n降低問題的程度，不要給予太大壓力 #\r不要問「興趣是什麼？」，改問「最近迷上什麼？」\n很多人被問到興趣其實壓力很大，會在想這樣的程度算是興趣嗎？我真的很喜歡做這件事嗎？ 但只要稍微改變問的內容，直接大幅降低問題的程度，變得毫無壓力、很好回答。\n不要問「你為什麼討厭青椒？」，改問「你有多討厭青椒？」\n不要問「Why」，問「how」。\n問「how」是在問一個感受的程度，是一種心情上的表達。而問「why」變成是要取得答案，這種要深入思考就會是閒聊的大忌。\n我覺得這個 tip 超酷的，那時候看到起雞皮疙瘩 (°ﾛ°٥)\n只是換一個問法，就真的變得超！級！好！回！答！\n但我還在細品這其中的奧妙，還沒找到一個很好的規則去應用他。\n沒有共同話題反而是個機會 #\r沒有共同話題也沒關係，反而可以請他多說說不是共同話題的部分，對內容保持好奇就可以聊下去。\n可以往這架構去問，就可以慢慢延續下去：\n過去 「從以前就很喜歡嗎？」「從什麼時候開始學的啊？」 現在 「現在也很常做嗎？」「最近有什麼推薦的嗎？」 未來 「這個週末也是嗎？」「下次有想參加的活動嗎？」 「爆雷」可以讓對方安心 #\r有時候先透露結局，可以讓對話變得輕鬆許多。\n「很芝麻小事的話題。」\n「非常無聊的話題，可以嗎？」\n「我想講個真實發生在我們公司人資身上的恐怖故事，可以嗎？」\n「你要聽聽我老家的狗狗做的蠢事嗎？」\n用代號描繪你的故事 #\r如果一段閒聊登場人事物過多，可以取一些綽號、代號，可以讓閒聊更有畫面。\n我覺得這就像是工作討論技術議題時，我們常會搭配手繪圖更好理解與溝通。\n不要誤以為看完書就可以當主 Key #\r像我們這種不擅長閒聊的人，肯定對於那些能掌控全場的主持人類型的人充滿嚮往。\n但看清楚現實，我們不適合當萬眾矚目的主持人。 反而對話中的潤滑劑比較適合我們，善用技巧去給予情緒價值，會更適合我們在「閒聊」中的角色定位。\n挑選關鍵字來回覆 #\r每一句對話中，都可以思考剛剛對方拋出來的話，哪個關鍵字可以更好的延伸聊下去。\n「我昨天去車站附近的一家拉麵店，排了好久的隊才吃到。」\n比如這句話就可以思考「車站附近」、「拉麵店」、「排隊」哪個話題更適合延伸下去？\n「車站附近」可以這樣展開： 「你經常去車站附近嗎？」 「車站附近還有 OOO 也很好吃哦！」 「拉麵店」可以這樣展開： 「哦！你有在蒐集拉麵地圖嗎？」 「他是哪個流派的拉麵呀？」 「排隊」可以這樣展開： 「你是那種為了美食會大排特排的人嗎？」 「你好厲害，我的話大概聽到排隊就走人了！」 可以看哪個路線更適合當下對話的彼此，展開對應的話題。\n而另一方面，有時候也不需要針對每個關鍵字反應、提問。\n什麼也不說，傾聽對方的話，安靜地點點頭，就是非常好的反應了。\n對話的你來我往，不要讓彼此喘不過氣。\n其他小 tips #\r對話中可以多配上一些狀聲詞和肢體動作，情緒價值比較多 傾聽的重點是「同理對方」，順著對方的感受去表達，先讓他一直說下去來表達他的感受，別忘了要順勢多給予反應 沉默的時候就拿自己周遭的事情來聊，真實且貼近自己的事情，更好傳達心情與感受 閒聊時，不必正面回答別人的問題。只要對話能繼續，怎麼答都行 話題要盡量帶到彼此身上，離彼此太遠的事情，感受也不大，不好表達心情 要注意不要一直都讓對方在說，這會讓人很不安，也要適時地揭露自己才會平衡 (可以抓個三分講自己，七分給對方) 把話題帶回去，延續已經結束的話題也沒問題，只要對話不要中斷就行 不記得的話就大方的說忘了，不要以模糊的記憶去聊 進階版：從擅長的觀點切入 #\r閒聊時應該要有屬於自己的觀點、切入點，而非專精的知識領域。\n我覺得這個是更進階版的技巧了，當熟悉上面的 tips 之後，可以再往這點繼續專研，目標成為閒聊大師 d(`･∀･)b\n書中給了一個範例：\n我有個顧問業的朋友，他是「物流」領域的專家。 任何現象，他都能從「為了確實傳遞事物，需要什麼樣的架構」這樣的觀點切入來思考和談論。凡事都從這種角度切入，因此早已 習以為常。\n像我就是鑽研「人際關係」。我習慣從人際關係的角度分析各種事物。 無論是政治話題，還是體育新聞，都可以思考其背後有著什麼樣的人際關係、人們又有什麼樣的心情， 因此對任何事物都能保持高度的好奇心。 擁有串聯所有話題的觀點。\n只要像這樣，擁有一個屬於自己的獨特觀點，既可以跟不同領域的人聊，也能做出自己獨特的評論。\n比方說，對方這樣展開話題：「我有養狗，最近常帶狗狗去專屬的運動空間玩。」\n這個時候，就算你沒有養狗，對狗也毫無興趣，只要有自己獨特的觀點，一樣聊得起來。\n擁有「物流」觀點的人，可以從「狗狗專屬的運動空間是什麼樣的地方啊？ 那個場所必須確保人可以順暢通行，而且要有足夠的空間」等角度來聊。\n而擁有「人際關係」觀點的我，則是對「什麼樣的人會去狗狗專屬的運動空間？飼主之間有交流嗎？」等問題感興趣。\n當然，獨特的觀點並非一朝一夕就能形成的。 可以先把自己感興趣的東西寫下來，然後試著思考這些事物有什麼共同點。\n從自己獨特的觀點切入，便能聊得又廣又深。\n心得 #\r雖然這本書薄薄一本，但的確改變了我許多對於閒聊的認知。 一開始，還只是當成工具書在看，只想著擷取一些小技巧來幫助閒聊。 但看著看著才發現，原來不只是工具書，還傳遞了很多很酷的概念，讓我學習到很多。\n滿推薦和我一樣是閒聊苦主的同學可以抽空看看，或許可以得到不少東西 (｡◕∀◕｡)\n","date":"2025 June 29","externalUrl":null,"permalink":"/posts/saiko-chat/","section":"Posts","summary":"","title":"讀書心得：最高閒聊法","type":"posts"},{"content":"","date":"2025 June 23","externalUrl":null,"permalink":"/tags/ai/","section":"Tags","summary":"","title":"Ai","type":"tags"},{"content":"","date":"2025 June 23","externalUrl":null,"permalink":"/tags/cursor/","section":"Tags","summary":"","title":"Cursor","type":"tags"},{"content":"","date":"2025 June 23","externalUrl":null,"permalink":"/tags/cursor-rule/","section":"Tags","summary":"","title":"Cursor-Rule","type":"tags"},{"content":"最近在工作上發生一件讓我苦惱的趣事，記錄一下這悲慘的過程 ( ˘•ω•˘ )\n剛開始改 code 來貢獻產出時，我都習慣先參考原有寫法。因為很多時候，每個團隊的寫法都會有其特殊意義，可能是比較適合該團隊的想法，可能是經過某種 trade-off 後的選擇，也有時候只是一個 coding style 的差異而已。所以，一開始還是盡可能的模仿，會比較快融入團隊吧 d(`･∀･)b\n基於這個想法，我就想說：\n「我在 Cursor Rule 內加一個規則好了，讓他可以盡量提供給我專案內就存在的寫法！」\n沒想到，就是因為這個想法，讓我的 Cursor AI 直接變成小笨蛋了… ( ×ω× )\n這也是我第一次使用 Cursor Rule，不知道怎麼寫，就一邊跟 AI 討論，一邊請他寫他自己看得懂的 Cursor Rule。還記得那時候還沾沾自喜的覺得：\n「哈哈，這個 Rule 可是你自己寫的，你一定會看的很順手吧！」\n一開始用的時候，的確完美的符合我的需求，會盡可能的給我已存在的寫法，但用著用著就出大事了。AI 開始亂回話，即使糾正他了，他還是繞了一圈再給一次錯誤答案。感覺就像是在問一個很沒耐心的客服，他會很快速、很和善的給你一個看起來合理但實際沒任何意義的錯誤答案 (°ཀ°)\n原本還想說是不是我問的太難了？但不對啊，那只是一個 ORM 怎麼開啟 debug 模式的問題，沒道理 AI 不會。最終，讓我明確認定他變笨的契機是，我同事只花 5 分鐘問了 Cursor 一樣的問題，就得到了可以正確運作的正確答案。\n「那我花了好幾個小時是在耍白癡膩 (／‵Д′)／~ ╧╧」\n後來，我開始反思到底是怎麼回事，為什麼我的 AI 變成小笨蛋。反覆測試之後，發現是 Cursor Rule 侷限了他的思考。太多規則綁住了他，變成一個不會思考只會照做的機器，跟我的人生一樣 。･ﾟ･(つд`ﾟ)･ﾟ･\n最後先把 Cursor Rule 拔掉了，AI 也恢復了原本的程度，真是令人感到欣慰，熟悉的智慧回來了 (❁´ω`❁)*✲ﾟ*\n以後寫 rule 或是 prompt 還是要多加注意，不要過度侷限 AI 的思考。可是也不能太過隨便，有清楚的目的才可以產出良好的答案。總感覺跟 AI 對話好像也沒那麼容易，又是一個該如何拿捏的困難問題呢 (◔౪◔)\n","date":"2025 June 23","externalUrl":null,"permalink":"/posts/wrong-rule-stupid-ai/","section":"Posts","summary":"","title":"亂寫 Cursor Rule 讓我的 AI 變笨了","type":"posts"},{"content":"","date":"2025 June 17","externalUrl":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":"","date":"2025 June 17","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"2025 June 17","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"\r前言 #\r之前我就有用 Hexo 來搭建個人 blog，但說來慚愧，只寫了兩篇就懶了，真是不愧對我極度懶惰的稱號 ಠ⁠◡⁠ಠ\n這次重拾寫文章便重新搜尋了一下，這次打算改用 Hugo 來搭建個人 blog。了解到 Hugo build 靜態文章的的速度真的飛快，加上也看到不錯的 theme，看能不能讓我多撐個幾篇文章 (⁠◍⁠•⁠ᴗ⁠•⁠◍⁠)⁠\n安裝 Hugo #\r首先先來安裝 Hugo 吧！\n我是選 windows 的 extended 版本 (版本差異可以查看 GitHub 說明)，可以直接下載 prebuilt binary 比較簡單 下載後解壓縮，然後把檔案都放到 c:\\hugo\\bin 底下 修改一下環境變數 另外，我自己平常都用 git bash 作為主要 terminal，所以還要改 .bashrc\n# ~/.bashrc export PATH=\u0026#34;$PATH:/c/hugo/bin\u0026#34; 最後用 hugo version 確認安裝是否完成\nhugo version # hugo v0.147.8-10da2bd765d227761641f94d713d094e88b920ae+extended windows/amd64 BuildDate=2025-06-07T12:59:52Z VendorInfo=gohugoio 安裝其實滿簡單的 (⁠｡⁠•̀⁠ᴗ⁠-⁠)⁠✧\n建立文章後台 #\r這裡先說明一下靜態網頁 blog 的運作模式：\n我們會搭建出一個 Hugo 專案（我這邊稱為文章後台），在裡面去寫很多篇 Markdown 格式的文章，然後再透過 Hugo 指令去轉換(build) 成靜態網頁的形式。最後只要部署靜態網頁到網路上就好囉，Hugo 專案內的其他東西就像是你的後台，都是產出文章的原始資料、設定檔或工具，不需要部署到網路上\n我們現在先來做 Hugo 專案的搭建\nhugo new site mywebsite 安裝 theme，我選擇 blowfish\ngit init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 設定 theme 的 configurations\n先刪掉原本 hugo 產生的 hugo.toml，然後把 blowfish theme 裡面的 config/* 整個複製到 root/* 要注意如果原本就有 module.toml 的話，要小心不要覆蓋掉 (雖然我沒這問題)\n然後打開 config/_default/hugo.toml 把這兩行改一下，baseURL 是要填到時候個人網站的網址哦！\ntheme = \u0026#34;blowfish\u0026#34; # UNCOMMENT THIS LINE baseURL = \u0026#34;https://ianchiu28.github.io\u0026#34; 到這邊可以先在 local 端試一下，理論上會看到成功畫面，有看到的話代表到目前為止都成功哦 d(`･∀･)b\nhugo server 寫一篇文章試試看 #\r輸入指令，會自動升成一篇文章在 content/posts/ 底下\nhugo new content content/posts/my-test-post.md 要注意改 draft = false，這樣用 Hugo 才會知道你這篇文章已經可以發布囉\n改一下 layout，這樣才可以顯示文章\n把 menu 打開\n# config/_default/menus.en.toml [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 調整 homepage 顯示內容\n# config/_default/params.toml [homepage] layout = \u0026#34;profile\u0026#34; # valid options: page, profile, hero, card, background, custom #homepageImage = \u0026#34;IMAGE.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 5 showMoreLink = true showMoreLinkDest = \u0026#34;/posts/\u0026#34; cardView = true cardViewScreenWidth = false layoutBackgroundBlur = false # only used when layout equals background 這樣就可以順利顯示囉 (◔⊖◔)つ 後面就再自己依喜好去調整自己喜歡的 configurations，可以看著 Hugo 的文件去調整，推薦先看這兩篇：\nhttps://blowfish.page/docs/getting-started/ https://blowfish.page/docs/configuration/ 把寫好的文章發布到個人網站 #\r我是採用 GitHub Page 作為我個人網站的 Host。因為不用錢，滿推薦的哦 (✪ω✪)\n先在你的 GitHub 帳號底下開一個新 repo，要注意名字必須是 \u0026lt;你的帳號\u0026gt;.github.io。 接著只要在這個 repo 下有一個 index.html，就可以透過 https://\u0026lt;你的帳號\u0026gt;.github.io 去瀏覽你的個人網站囉～不過我們直接用 Hugo 來試試吧！\n先把文章 build 成靜態網頁\nhugo 把 public/* 都複製到 GitHub Page 的 repo 內，然後 commit 上去，就部屬完成囉～\n題外話：integrity 問題 #\r我部屬到 GitHub Page 後，有遇到 integrity 問題。找了一下，可能是 build 的時候有壓縮或是什麼導致的。目前沒有看到很好的解法，也找不到 Hugo/Blowfish 有關閉 integrity config 的方法\n現況是找到 /theme/blowfish/layouts/partials/head.html，找到有 integrity 的地方都把他砍掉。以及 /theme/blowfish/layouts/partials/vendor.html，把 jQuery 的 integrity 砍掉。然後重新用 hugo build 靜態網頁即可～ 如果有更好的做法請再跟我說 இдஇ\n最後加碼：我覺得每次都要複製 public/* 好麻煩 #\r寫了一個 script\n#!/bin/bash # 設定目標資料夾 TARGET_DIR=\u0026#34;../ianchiu28.github.io\u0026#34; # 確認目標資料夾存在 if [ ! -d \u0026#34;$TARGET_DIR\u0026#34; ]; then echo \u0026#34;錯誤：目標資料夾 $TARGET_DIR 不存在\u0026#34; exit 1 fi # 先建立 public 資料夾 hugo # 清空目標資料夾（保留 .git） find \u0026#34;$TARGET_DIR\u0026#34; -mindepth 1 -maxdepth 1 ! -name \u0026#39;.git\u0026#39; -exec rm -rf {} + # 複製所有檔案，包含隱藏檔案 cp -rf public/. \u0026#34;$TARGET_DIR/\u0026#34; echo \u0026#34;已將網站內容發布到 $TARGET_DIR\u0026#34; 執行方式\nsh publish.sh 然後用 git commit \u0026amp; push 就完成囉 (｡◕∀◕｡)\n不太重要的閒聊 #\r最近換了一份新工作，正處在努力適應的階段。回想起準備求職的這段期間，發覺自己其實沒留下什麼記錄在這世界上，我能講的好像只有工作經歷而已。看著眾多對手（？）都有著豐富的經歷，加上我也想讓自己的人生看起來豐富一點，準備重拾寫文章啦！這裡算是立一個 flag，希望極度懶惰的我能堅持下去 (⁠ʘ⁠ᗩ⁠ʘ⁠’⁠)\n","date":"2025 June 17","externalUrl":null,"permalink":"/posts/set-up-hugo-blog/","section":"Posts","summary":"","title":"用 Hugo 搭建個人網站","type":"posts"},{"content":"","date":"2018 June 13","externalUrl":null,"permalink":"/tags/heroku/","section":"Tags","summary":"","title":"Heroku","type":"tags"},{"content":"","date":"2018 June 13","externalUrl":null,"permalink":"/tags/line-bot/","section":"Tags","summary":"","title":"Line-Bot","type":"tags"},{"content":"","date":"2018 June 13","externalUrl":null,"permalink":"/tags/node.js/","section":"Tags","summary":"","title":"Node.js","type":"tags"},{"content":" 前言 #\r此篇將會介紹如何使用 Heroku 架設一台伺服器，作為 LineBot 的 webhook server。使用的語言是 Node.js，只需要在程式內撰寫你的邏輯，便可以讓你的 LineBot 更有智慧的和你聊天唷！\n開始吧！\n事前準備 #\r此篇文章會需要用到 Node.js 和 Git，請務必先下載和安裝好哦～\nNode.js: https://nodejs.org/en/ Git: https://git-scm.com/downloads\n架設一台 Heroku 伺服器 #\r什麼是 Heroku ? #\rURL: https://www.heroku.com/\nHeroku 是一個租用伺服器的雲端服務，我們可以租用伺服器來執行我們撰寫的程式。他就像是 AWS、Azure、GCP 等等的雲端服務大廠，而 Heroku 有提供我們一些免費配額讓我們租用一些小伺服器，雖然這些小伺服器會受到一些限制，但是要用來玩玩看 LineBot 已經很足夠了哦！\n關於 Heroku 的免費配額請參考他們的官方網站：https://devcenter.heroku.com/articles/free-dyno-hours\n註冊 #\r註冊我想應該就不用多做說明了，就到 Heroku 的網頁上註冊吧～\n開啟一台伺服器 #\r首先我們先登入 Heroku！\n接著我們點選右上角的 New → Create new app 來開啟一台伺服器。\n填入這台伺服器的資料，區域的話隨便吧，速度應該不會差太多～\n這樣就開啟一台伺服器囉！是不是超級簡單啊～\n不過，現在只是有一台伺服器擺在那裡，但我們不知道他是不是活的好好的。\n所以我們要寫一個非常簡單的程式，讓我們可以知道這台伺服器運行的好好的哦～\n寫一個基本 Node.js 程式 #\r在一個你喜歡的地方開一個資料夾，名字取你喜歡的就好了，這個資料夾就是拿來放我們的伺服器程式的地方哦！我在這邊取名為 LineBotBlueStar。\n然後使用 cmd(註1) 進到你的資料夾(註2)吧，我們來做 Node.js 的初始化。\n註1 cmd = windows 的命令提示字元。 註2 假設 LineBotBlueStar 資料夾放在 D 槽底下的 GitHub 資料夾 內，你可以這樣下指令。\n\u0026gt; D:\r\u0026gt; cd GitHub\\LineBotBlueStar 接著，下指令 npm init -y(註3)。\n註3 -y 只是因為我懶得輸入一些資訊，想輸入專案資訊的話，可以下 npm init 就可以了哦。\n再來，為了簡化過程，我們使用 Node.js 中的 Express，幫助我們建立伺服器的資料架構。\n\u0026gt; npm i -g express-generator \u0026gt; express --view=pug // 接著它會問問題，請輸入y。 destination is not empty, continue? [y/N] y 到這邊為止，你可以看到你的 LineBot 資料夾已經多了文件夾和檔案囉，這麼多檔案代表什麼意思呢？還不用緊張，後面會再慢慢提到，我們先讓伺服器動起來吧！\n最後，再下一個指令，幫該安裝的 module 全部裝起來！這個指令可能會跑一小段時間哦～\n\u0026gt; npm install 現在我們先在我們的電腦上測試一下伺服器是不是都好了，下指令讓程式跑起來！\n\u0026gt; npm start // 此時你的 cmd 會沒辦法再輸入任何指令，這是正確的哦！ 再來開你的瀏覽器，輸入網址 http://localhost:3000，如果有看到 Express 的畫面，就代表我們成功囉！\n如果想停掉程式，回到 cmd 上按下 Ctrl + C，就可以停掉程式囉！\n把程式放到伺服器上 #\r現在我們有伺服器、有程式，接著就是讓他們合體！好啦，其實是把程式上傳到伺服器，讓他執行起來。\n怎麼做呢？其實方法有很多，Heroku 的網站也都有教，請看到你的專案的 deploy 頁面\ndeployment method 列出了上傳的一些方法，可以自己選擇一種來用～\n筆者在此篇文章選用第一種 Deploy using Heroku Git\n我們就按照網頁寫的步驟來做吧！第一步先下載並安裝 Heroku CLI\n安裝好後，然後輸入指令\n\u0026gt; Heroku login 如果你剛安裝完 Heroku CLI，馬上就下指令，可能會遇到 Heroku 指令不能辨識的問題。處理方式也很簡單，關掉 cmd 重新開一個就可以囉！記得要下指令回到 LineBot 資料夾哦！\n接著，我們繼續按照網頁下指令，先進到你的 LineBot 資料夾，再下指令\n\u0026gt; git init \u0026gt; heroku git:remote -a linebot-bluestar // 記得要換成你的 LineBot 名字 // 完成後你會看到 \u0026#34;set git remote heroku to https://git.heroku.com/linebot-bluestar.git\u0026#34; 的文字哦！ 再來，部屬我們的程式上伺服器吧！\n\u0026gt; git add . (這個指令會一段時間) \u0026gt; git commit -am \u0026#34;make it better\u0026#34; \u0026gt; git push heroku master 完成！趕緊來看一下伺服器是不是成功了！\n在 Heroku 網頁上的右上角，有一個 Open app 的按鈕，按下去看看是不是也可以看到 Express 呢？如果有，那你成功囉！\n到這邊為止，你已經成功搭建一台伺服器，並在上面執行了 Node.js 程式了！\n撰寫 LineBot 程式 #\r安裝 LineBot module #\r首先我們會使用到 Node.js 中的 linebot 這個 module，先來下載它吧！\n一樣到你的 LineBot 資料夾內下指令\n\u0026gt; npm i -S linebot 在 Express 建立 Webhook 程式檔案 #\r還記得我們使用了 Express 來幫助我們建立這個專案的檔案結構嗎？這邊簡單介紹一下～\n當我們運行這隻程式的時候，會率先執行 app.js 這隻檔案，接著在看 app.js 裡面是怎麼寫的，再來決定去執行哪些檔案哦！\n我們要做的是在 routes 這個資料夾內建立一個 webhook.js，並設定 app.js 去串接這支 webhook.js。\n如此一來，我們就可以在 webhook.js 裡面寫所有 LineBot 的邏輯了！\n那就開始吧！進到 routes 新增一支檔案取名為 webhook.js。然後打開 webhook.js，寫入以下程式碼：\nvar express = require(\u0026#39;express\u0026#39;); var router = express.Router(); console.log(\u0026#39;webhook.js is working\u0026#39;); module.exports = router; 再來打開 app.js，我們要寫入以下程式碼，讓他可以串接這支 webhook.js：\nvar webhookRouter = require(\u0026#39;./routes/webhook\u0026#39;); app.use(\u0026#39;/webhook\u0026#39;, webhookRouter); 這兩行要寫在哪裡呢，找跟他們長很像的地方寫上去吧，就像下圖紅框處的位置\n到這邊我們先測試一下是否成功，下指令\n\u0026gt; npm start // 如果有看到 \u0026#34;webhook.js is working\u0026#34; 就成功囉！ 撰寫 LineBot 邏輯 #\r這階段我們終於要來寫 LineBot 的邏輯啦！\n首先我們要先移除掉 app.js 中解析 JSON 的程式碼，不然 LineBot 丟過來的訊息就會先被解析過，這樣我們的程式就沒辦法運作了。\n要移除的程式碼只有一行，就是 app.use(express.json());。\n我們可以很簡單的把這行刪除掉，或是把它註解掉，如下圖。\n再來我希望 LineBot 能回應我打給它的字，所以把 webhook.js 改成這樣：\nvar express = require(\u0026#39;express\u0026#39;); var router = express.Router(); console.log(\u0026#39;webhook.js is working\u0026#39;); // linebot module var linebot = require(\u0026#39;linebot\u0026#39;); // linebot information var bot = linebot({ channelId: \u0026#39;YOUR_CHANNEL_ID\u0026#39;, channelSecret: \u0026#39;YOUR_CHANNEL_SECRET\u0026#39;, channelAccessToken: \u0026#39;YOUR_CHANNEL_ACCESS_TOKEN\u0026#39; }); // linebot message event bot.on(\u0026#39;message\u0026#39;, function (event) { var userInput = event.message.text; var botReply = \u0026#39;你剛剛說了: \u0026#39; + userInput; // reply to user event.reply(botReply).then(data =\u0026gt; { // if reply success console.log(\u0026#39;Reply: \u0026#39;, message); }).catch(error =\u0026gt; { // if something went wrong console.log(\u0026#39;Error: \u0026#39;, error) }); }); var linebotParser = bot.parser(); router.post(\u0026#39;/\u0026#39;, linebotParser); module.exports = router; 這邊會看到 linebot information 那邊要輸入 3 組類似代碼的東西，我們可以透過 Line Developers 後台取得 (https://developers.line.me/console/)。\n到 Line 的後台網頁搜尋吧！\n我們可以在 Basic information 中找到 Channel ID 和 Channel secret。\n接著在 Messaging settings 中找到 Channel access token。\n比較特別的是 Channel access token 一開始是空白的，要按右方的 issue 來產生一組新的 token 哦！\n由於我們是第一次產生，token 要多久過期的問題設定 0 小時就可以了。\n把三組代碼都填入程式碼內，就完成最簡單的邏輯囉！\n在本地端測試 LineBot #\r這時候我們會心想：「剛剛把程式都寫好了，要趕緊來測試一下了，我們趕快把程式跟 LineBot 串接在一起吧！」\n這時看到 LineBot 的串接的地方如何設定，會發現 LineBot 的串接需要有 HTTPS 的網址，而我們本地端的電腦正常來說不會有一個 HTTPS 的網址啊！\n這時要使用一個服務 ngrok (https://ngrok.com/)。它能夠讓本地端的電腦，暫時有一個 HTTPS 的網址，至於細節怎麼做到就不說了，來看看怎麼用吧！\n註冊和下載 ngrok #\r到 ngrok 的官網，按下 Get started for free，然後註冊一個帳號。\n接著會到一個教你如何安裝的頁面，按照教學下載檔案、解壓縮檔案和連結帳號。\n連結帳號 #\r連結帳號這個步驟可能會有點難，步驟如下：\n先確定剛剛下載的檔案，解壓縮後放在哪裡，例如我放在 D:\\ngrok-stable-windows-amd64\\ngrok.exe。\n開另外一個 cmd 進入到剛剛下載的 ngrok.exe 放的資料夾位置。\n\u0026gt; D: \u0026gt; cd ngrok-stable-windows-amd64 輸入連結帳號的指令。 \u0026gt; ngrok authtoken YOUR_TOKEN_ON_WEB 看到 \u0026ldquo;Authtoken saved to configuration file\u0026rdquo; 就代表成功了！ 使用 ngrok 建立本地端 HTTPS 伺服器 #\r我們要開始使用 ngrok 來建立本地端 HTTPS 伺服器囉！\n首先我們要準備兩個 cmd 視窗，一個進到 LineBot 的資料夾，另一個進到 ngrok 的資料夾。\n我們先用第一個 cmd 把 Node.js 執行起來，還記得嗎？指令 npm start。\n再用另一個 cmd 執行 ngrok，把我們的 Node.js 伺服器變成 HTTPS 伺服器。\n\u0026gt; ngrok http 3000 // 因為我們 Node.js 的 port 預設是使用 3000，所以不像是 ngrok 教學中寫的 80 這邊要注意一點，順序不能錯！一定要先執行 Node.js，再用 ngrok 改成 HTTPS 伺服器！\n然後我們試試看 ngrok 給我們的網址，像我這次得到的是 https://5381cacc.ngrok.io。\n丟到瀏覽器上執行，如果有看到 Express 就代表成功囉！\n跟 Line 串接在一起測試 #\r我們回到 Line Developers 後台，把 Use webhooks 改成 Enabled，並在 Webhook URL 的地方填上網址，網址請輸入 \u0026ldquo;ngrok 給的網址/webhook\u0026rdquo;，例如筆者這次就要填入 \u0026ldquo;5381cacc.ngrok.io/webhook\u0026rdquo;。\n為什麼後面要多加 /webhook 呢？因為我們的 app.js 裡面有寫到 app.use('/webhook', webhookRouter);，這樣 LineBot 才能順利的使用我們 webhook.js 裡面寫的邏輯。\n填寫完 webhook 的網址後，記得要按右方的 Verify 去驗證，看到 Success 之後，LineBot 就會把它收到的訊息丟到伺服器裡面囉！\n事不宜遲，來測試看看吧！用 Line 對你的 LineBot 說句話看看！\nLineBot 有正確執行囉！但是要怎麼去掉那個基本回覆呢？很簡單，到 Line 的後台把 Auto-reply messages 關掉就可以囉！\n再測試一次看看吧！\n跟讓 Heroku 伺服器與 Line 串接在一起 #\r終於到了這個階段了！我們目前有一台運作正常的 Heroku 伺服器，還有運作正常的程式碼。接下來就是再它們合體了。來吧！最後一步了！\n部屬程式到 Heroku 上面 #\r這邊的動作其實我們稍早已經做過一次了，不會太難！\n打開一個新的 cmd，進入到 LineBot 的資料夾，輸入指令\n\u0026gt; heroku login \u0026gt; git add . \u0026gt; git commit -am \u0026#34;line bot first submit\u0026#34; \u0026gt; git push heroku master 完成了之後，一樣可以點選 Open app 看看伺服器是否運作正常。\n修改 Line 後台 Webhook URL #\r接著我們到 Line Developers 的後台網頁，修改 Webhook URL，改成 Heroku 的網址。\nHeroku 的網址怎麼看？很簡單，按下 Open app 之後，瀏覽器上的網址就是 Heroku 的網址了！\n修改完 URL 之後，別忘記也要按 Verify 測試一下！\n最後用 Line 測試看看\n完成！現在 LineBot 已經和 Heroku 伺服器上的程式串接在一起了！\n再次修改程式邏輯 #\r我們再次修改一下程式的邏輯，改成判斷使用者輸入的文字，來決定回覆的訊息吧！\n回到 webhook.js。\n// linebot message event bot.on(\u0026#39;message\u0026#39;, function (event) { var userInput = event.message.text; var botReply; if (userInput.includes(\u0026#39;你\u0026#39;) \u0026amp;\u0026amp; userInput.includes(\u0026#39;誰\u0026#39;)) { botReply = \u0026#39;我是藍藍星星！\u0026#39;; } else { botReply = \u0026#39;你剛剛說了: \u0026#39; + userInput; } // reply to user event.reply(botReply).then(data =\u0026gt; { // if reply success console.log(\u0026#39;Reply: \u0026#39;, message); }).catch(error =\u0026gt; { // if something went wrong console.log(\u0026#39;Error: \u0026#39;, error) }); }); 只要使用者的文字中，同時包含了 \u0026ldquo;你\u0026rdquo; 和 \u0026ldquo;誰\u0026rdquo;，LineBot 就會回覆 \u0026ldquo;我是藍藍星星！\u0026quot;。\n我們部屬到 Heroku 上試試看吧！指令就不再說了哦～\n一些小提醒 #\r當你部屬上 Heroku 之後，就不會在需要用到 ngrok 囉。不過它仍然是你本地端測試的利器，畢竟不可能天天沒 bug 嘛～ 出現 bug 的時候，你就會需要搭配 ngrok 來測試囉！記得用 ngrok 時，要去修改 Line 後台的 Webhook URL。\n關於 LineBot 邏輯的部分，可以參考 linebot 這個 module。它還有除了 message 的 event 可以串接，可以好好拜讀一下文件，寫出更酷的 LineBot 邏輯！\nURL: https://www.npmjs.com/package/linebot\n結語 #\r這篇文章寫了很多設定相關的教學，反而程式邏輯的部分都沒寫到多少。不過我認為最難、最容易卡住的就是設定了。我想設定都完成的話，接下來邏輯就是改改程式就好囉！而且程式正是我們該發揮創意的地方呀！\n如果過程中遇到什麼地方卡住了，歡迎留言一起討論哦！\n","date":"2018 June 13","externalUrl":null,"permalink":"/posts/line-bot-2nd/","section":"Posts","summary":"","title":"架設一個 LineBot 聊天機器人 (下篇)","type":"posts"},{"content":"\r前言 #\r此篇將會介紹如何使用 Line 的網頁去建立一個 LineBot 聊天機器人。不需撰寫任何程式或架設伺服器，只需要動動小手點擊網頁，把屬於你的 LineBot 設定好，就可以跟你做簡單的對話囉！\n開始吧！\n建立 Line developer 帳號 #\r請先開啟 Line developer 網頁\nhttps://developers.line.me/en/\n接著按右上角的 Log in，登入你的 Line 帳號\n註冊 Developer 帳號\n註冊完就成為 Line 的開發者囉！\n建立一個 provider #\r按下 Create provider 或是 Add new provider，來建立的頁面\n輸入你的 provider name 之後按下 Confirm\n這邊的 provider name 不是 LineBot 的名字，而是這個 LineBot 的提供者名稱\n例如：IanChiu28 開發了一個聊天機器人-小嘴鳥，那這邊的 provider name 就要填 IanChiu28，然後我們的機器人叫做小嘴鳥唷！\n建立一個 Messaging API #\r現在你的畫面應該像這個樣子\n按下右邊的 Messaging API 吧！這就是建立一個機器人的身份囉！\n接著我們一步步說明這頁要怎麼填\nApp icon：聊天機器人的大頭照 App name：聊天機器人的名字 App description：聊天機器人的簡介 Plan：選擇 Developer Trail Developer Trail 才可以用加值功能，雖然朋友數有限制，但是只是玩具少點人用也沒關係啦！\nCategory：隨便選一個 Subcategory：隨便選一個 Email address：填入你的信箱 完成後大概會像這樣\n我怕圖片會有版權問題，小畫家隨便畫一個啦～\n最後的地方有一個 QR Code 可以讓你用手機加入好友，馬上來掃掃看吧！\n馬上跟他聊天看看吧！\n到這邊為止你已經建立你的聊天機器人囉！\n使用 Line 的後台網頁修改機器人的回話內容 #\r我們先回到 Line developer 的網頁，進到你剛剛建立的聊天機器人的設定頁面\n我們看到最下面 QR Code 的上面一點點的地方，有一個回覆訊息的區塊\n點一下 Set message，會到 Line manager 的頁面\n在這個頁面就可以設定回覆的訊息囉！我們通常會用到的地方是訊息那一個區塊\n接著我們來試試看關鍵字回應訊息\n按下右上角的新增\n在代表關鍵字的地方打上你想要的關鍵字，如果關鍵字有可能多個，可以追加關鍵字\n然後在下方的回覆區塊，可以選擇你想要的回覆方式\n設定完成，接著趕緊來試試看吧！\n可以看到我們打了關鍵字的話，機器人就會回應你剛剛設定的回覆唷～\n需要注意的是，關鍵字必需要完全符合才可以，向最後一句「安安安」只有部分符合是不會有效果的\n結語 #\rOK～ 我們完成了最基本的聊天機器人囉！\n完全不需要寫任何的程式，只是在網頁上做一些設定，就可以有一個屬於自己的機器人了。但是想跟朋友講垃圾話的話，關鍵字似乎不太符合我們的需求啊！在平常聊天時要完全符合關鍵字實在是太困難了，所以下一篇將會透過程式的方式做到部分符合的關鍵字回覆功能。有興趣的話，請繼續前往下一篇唷～\n","date":"2018 May 23","externalUrl":null,"permalink":"/posts/line-bot-1st/","section":"Posts","summary":"","title":"架設一個 LineBot 聊天機器人 (上篇)","type":"posts"},{"content":"\r架設一個 LineBot 聊天機器人 #\r此系列文共分上下兩篇:\n架設一個 LineBot 聊天機器人 (上篇) 架設一個 LineBot 聊天機器人 (下篇) 簡單介紹 #\r上篇 #\r此篇將會介紹如何使用 Line 的網頁去建立一個 LineBot 聊天機器人。不需撰寫任何程式或架設伺服器，只需要動動小手點擊網頁，把屬於你的 LineBot 設定好，就可以跟你做簡單的對話囉！\n下篇 #\r此篇將會介紹如何使用 Heroku 架設一台伺服器，作為 LineBot 的 webhook server。使用的語言是 Node.js，只需要在程式內撰寫你的邏輯，便可以讓你的 LineBot 更有智慧的和你聊天唷！\n不太重要的閒聊 #\r會寫這篇系列文主要是受到 IT邦的鐵人賽文章 - 卡米狗 的啟發，看完文章後就很想做一個機器人來跟朋友講垃圾話啊！加上自己剛開始學習 Node.js，變想說用 Node.js 來開發一個 LineBot 試試看好了，做個玩具來玩玩順便練個功。\n此文功能面上可能不會像卡米狗這麼齊全，算是個小玩具、學習紀錄這樣子，如果你有什麼想法或功能，歡迎一起討論，我們可以一起研究看看～\n","date":"2018 May 19","externalUrl":null,"permalink":"/posts/line-bot-intro/","section":"Posts","summary":"","title":"架設一個 LineBot 聊天機器人","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]